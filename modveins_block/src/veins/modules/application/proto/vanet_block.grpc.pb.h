// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: vanet_block.proto
#ifndef GRPC_vanet_5fblock_2eproto__INCLUDED
#define GRPC_vanet_5fblock_2eproto__INCLUDED

#include "vanet_block.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace vanet_block {

class BlockchainVanet final {
 public:
  static constexpr char const* service_full_name() {
    return "vanet_block.BlockchainVanet";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status reg_vehicle(::grpc::ClientContext* context, const ::vanet_block::block_data& request, ::vanet_block::response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vanet_block::response>> Asyncreg_vehicle(::grpc::ClientContext* context, const ::vanet_block::block_data& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vanet_block::response>>(Asyncreg_vehicleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vanet_block::response>> PrepareAsyncreg_vehicle(::grpc::ClientContext* context, const ::vanet_block::block_data& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vanet_block::response>>(PrepareAsyncreg_vehicleRaw(context, request, cq));
    }
    virtual ::grpc::Status update_pid(::grpc::ClientContext* context, const ::vanet_block::block_data& request, ::vanet_block::response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vanet_block::response>> Asyncupdate_pid(::grpc::ClientContext* context, const ::vanet_block::block_data& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vanet_block::response>>(Asyncupdate_pidRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vanet_block::response>> PrepareAsyncupdate_pid(::grpc::ClientContext* context, const ::vanet_block::block_data& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vanet_block::response>>(PrepareAsyncupdate_pidRaw(context, request, cq));
    }
    virtual ::grpc::Status qurery_Block(::grpc::ClientContext* context, const ::vanet_block::psuedoid& request, ::vanet_block::block_data* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vanet_block::block_data>> Asyncqurery_Block(::grpc::ClientContext* context, const ::vanet_block::psuedoid& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vanet_block::block_data>>(Asyncqurery_BlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vanet_block::block_data>> PrepareAsyncqurery_Block(::grpc::ClientContext* context, const ::vanet_block::psuedoid& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vanet_block::block_data>>(PrepareAsyncqurery_BlockRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void reg_vehicle(::grpc::ClientContext* context, const ::vanet_block::block_data* request, ::vanet_block::response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void reg_vehicle(::grpc::ClientContext* context, const ::vanet_block::block_data* request, ::vanet_block::response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void update_pid(::grpc::ClientContext* context, const ::vanet_block::block_data* request, ::vanet_block::response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void update_pid(::grpc::ClientContext* context, const ::vanet_block::block_data* request, ::vanet_block::response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void qurery_Block(::grpc::ClientContext* context, const ::vanet_block::psuedoid* request, ::vanet_block::block_data* response, std::function<void(::grpc::Status)>) = 0;
      virtual void qurery_Block(::grpc::ClientContext* context, const ::vanet_block::psuedoid* request, ::vanet_block::block_data* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vanet_block::response>* Asyncreg_vehicleRaw(::grpc::ClientContext* context, const ::vanet_block::block_data& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vanet_block::response>* PrepareAsyncreg_vehicleRaw(::grpc::ClientContext* context, const ::vanet_block::block_data& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vanet_block::response>* Asyncupdate_pidRaw(::grpc::ClientContext* context, const ::vanet_block::block_data& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vanet_block::response>* PrepareAsyncupdate_pidRaw(::grpc::ClientContext* context, const ::vanet_block::block_data& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vanet_block::block_data>* Asyncqurery_BlockRaw(::grpc::ClientContext* context, const ::vanet_block::psuedoid& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vanet_block::block_data>* PrepareAsyncqurery_BlockRaw(::grpc::ClientContext* context, const ::vanet_block::psuedoid& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status reg_vehicle(::grpc::ClientContext* context, const ::vanet_block::block_data& request, ::vanet_block::response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vanet_block::response>> Asyncreg_vehicle(::grpc::ClientContext* context, const ::vanet_block::block_data& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vanet_block::response>>(Asyncreg_vehicleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vanet_block::response>> PrepareAsyncreg_vehicle(::grpc::ClientContext* context, const ::vanet_block::block_data& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vanet_block::response>>(PrepareAsyncreg_vehicleRaw(context, request, cq));
    }
    ::grpc::Status update_pid(::grpc::ClientContext* context, const ::vanet_block::block_data& request, ::vanet_block::response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vanet_block::response>> Asyncupdate_pid(::grpc::ClientContext* context, const ::vanet_block::block_data& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vanet_block::response>>(Asyncupdate_pidRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vanet_block::response>> PrepareAsyncupdate_pid(::grpc::ClientContext* context, const ::vanet_block::block_data& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vanet_block::response>>(PrepareAsyncupdate_pidRaw(context, request, cq));
    }
    ::grpc::Status qurery_Block(::grpc::ClientContext* context, const ::vanet_block::psuedoid& request, ::vanet_block::block_data* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vanet_block::block_data>> Asyncqurery_Block(::grpc::ClientContext* context, const ::vanet_block::psuedoid& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vanet_block::block_data>>(Asyncqurery_BlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vanet_block::block_data>> PrepareAsyncqurery_Block(::grpc::ClientContext* context, const ::vanet_block::psuedoid& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vanet_block::block_data>>(PrepareAsyncqurery_BlockRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void reg_vehicle(::grpc::ClientContext* context, const ::vanet_block::block_data* request, ::vanet_block::response* response, std::function<void(::grpc::Status)>) override;
      void reg_vehicle(::grpc::ClientContext* context, const ::vanet_block::block_data* request, ::vanet_block::response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void update_pid(::grpc::ClientContext* context, const ::vanet_block::block_data* request, ::vanet_block::response* response, std::function<void(::grpc::Status)>) override;
      void update_pid(::grpc::ClientContext* context, const ::vanet_block::block_data* request, ::vanet_block::response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void qurery_Block(::grpc::ClientContext* context, const ::vanet_block::psuedoid* request, ::vanet_block::block_data* response, std::function<void(::grpc::Status)>) override;
      void qurery_Block(::grpc::ClientContext* context, const ::vanet_block::psuedoid* request, ::vanet_block::block_data* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::vanet_block::response>* Asyncreg_vehicleRaw(::grpc::ClientContext* context, const ::vanet_block::block_data& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vanet_block::response>* PrepareAsyncreg_vehicleRaw(::grpc::ClientContext* context, const ::vanet_block::block_data& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vanet_block::response>* Asyncupdate_pidRaw(::grpc::ClientContext* context, const ::vanet_block::block_data& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vanet_block::response>* PrepareAsyncupdate_pidRaw(::grpc::ClientContext* context, const ::vanet_block::block_data& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vanet_block::block_data>* Asyncqurery_BlockRaw(::grpc::ClientContext* context, const ::vanet_block::psuedoid& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vanet_block::block_data>* PrepareAsyncqurery_BlockRaw(::grpc::ClientContext* context, const ::vanet_block::psuedoid& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_reg_vehicle_;
    const ::grpc::internal::RpcMethod rpcmethod_update_pid_;
    const ::grpc::internal::RpcMethod rpcmethod_qurery_Block_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status reg_vehicle(::grpc::ServerContext* context, const ::vanet_block::block_data* request, ::vanet_block::response* response);
    virtual ::grpc::Status update_pid(::grpc::ServerContext* context, const ::vanet_block::block_data* request, ::vanet_block::response* response);
    virtual ::grpc::Status qurery_Block(::grpc::ServerContext* context, const ::vanet_block::psuedoid* request, ::vanet_block::block_data* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_reg_vehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_reg_vehicle() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_reg_vehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status reg_vehicle(::grpc::ServerContext* /*context*/, const ::vanet_block::block_data* /*request*/, ::vanet_block::response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestreg_vehicle(::grpc::ServerContext* context, ::vanet_block::block_data* request, ::grpc::ServerAsyncResponseWriter< ::vanet_block::response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_update_pid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_update_pid() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_update_pid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update_pid(::grpc::ServerContext* /*context*/, const ::vanet_block::block_data* /*request*/, ::vanet_block::response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestupdate_pid(::grpc::ServerContext* context, ::vanet_block::block_data* request, ::grpc::ServerAsyncResponseWriter< ::vanet_block::response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_qurery_Block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_qurery_Block() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_qurery_Block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status qurery_Block(::grpc::ServerContext* /*context*/, const ::vanet_block::psuedoid* /*request*/, ::vanet_block::block_data* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestqurery_Block(::grpc::ServerContext* context, ::vanet_block::psuedoid* request, ::grpc::ServerAsyncResponseWriter< ::vanet_block::block_data>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_reg_vehicle<WithAsyncMethod_update_pid<WithAsyncMethod_qurery_Block<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_reg_vehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_reg_vehicle() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::vanet_block::block_data, ::vanet_block::response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::vanet_block::block_data* request, ::vanet_block::response* response) { return this->reg_vehicle(context, request, response); }));}
    void SetMessageAllocatorFor_reg_vehicle(
        ::grpc::MessageAllocator< ::vanet_block::block_data, ::vanet_block::response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::vanet_block::block_data, ::vanet_block::response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_reg_vehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status reg_vehicle(::grpc::ServerContext* /*context*/, const ::vanet_block::block_data* /*request*/, ::vanet_block::response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* reg_vehicle(
      ::grpc::CallbackServerContext* /*context*/, const ::vanet_block::block_data* /*request*/, ::vanet_block::response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_update_pid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_update_pid() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::vanet_block::block_data, ::vanet_block::response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::vanet_block::block_data* request, ::vanet_block::response* response) { return this->update_pid(context, request, response); }));}
    void SetMessageAllocatorFor_update_pid(
        ::grpc::MessageAllocator< ::vanet_block::block_data, ::vanet_block::response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::vanet_block::block_data, ::vanet_block::response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_update_pid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update_pid(::grpc::ServerContext* /*context*/, const ::vanet_block::block_data* /*request*/, ::vanet_block::response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* update_pid(
      ::grpc::CallbackServerContext* /*context*/, const ::vanet_block::block_data* /*request*/, ::vanet_block::response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_qurery_Block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_qurery_Block() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::vanet_block::psuedoid, ::vanet_block::block_data>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::vanet_block::psuedoid* request, ::vanet_block::block_data* response) { return this->qurery_Block(context, request, response); }));}
    void SetMessageAllocatorFor_qurery_Block(
        ::grpc::MessageAllocator< ::vanet_block::psuedoid, ::vanet_block::block_data>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::vanet_block::psuedoid, ::vanet_block::block_data>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_qurery_Block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status qurery_Block(::grpc::ServerContext* /*context*/, const ::vanet_block::psuedoid* /*request*/, ::vanet_block::block_data* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* qurery_Block(
      ::grpc::CallbackServerContext* /*context*/, const ::vanet_block::psuedoid* /*request*/, ::vanet_block::block_data* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_reg_vehicle<WithCallbackMethod_update_pid<WithCallbackMethod_qurery_Block<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_reg_vehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_reg_vehicle() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_reg_vehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status reg_vehicle(::grpc::ServerContext* /*context*/, const ::vanet_block::block_data* /*request*/, ::vanet_block::response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_update_pid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_update_pid() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_update_pid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update_pid(::grpc::ServerContext* /*context*/, const ::vanet_block::block_data* /*request*/, ::vanet_block::response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_qurery_Block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_qurery_Block() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_qurery_Block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status qurery_Block(::grpc::ServerContext* /*context*/, const ::vanet_block::psuedoid* /*request*/, ::vanet_block::block_data* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_reg_vehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_reg_vehicle() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_reg_vehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status reg_vehicle(::grpc::ServerContext* /*context*/, const ::vanet_block::block_data* /*request*/, ::vanet_block::response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestreg_vehicle(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_update_pid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_update_pid() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_update_pid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update_pid(::grpc::ServerContext* /*context*/, const ::vanet_block::block_data* /*request*/, ::vanet_block::response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestupdate_pid(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_qurery_Block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_qurery_Block() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_qurery_Block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status qurery_Block(::grpc::ServerContext* /*context*/, const ::vanet_block::psuedoid* /*request*/, ::vanet_block::block_data* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestqurery_Block(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_reg_vehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_reg_vehicle() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->reg_vehicle(context, request, response); }));
    }
    ~WithRawCallbackMethod_reg_vehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status reg_vehicle(::grpc::ServerContext* /*context*/, const ::vanet_block::block_data* /*request*/, ::vanet_block::response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* reg_vehicle(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_update_pid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_update_pid() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->update_pid(context, request, response); }));
    }
    ~WithRawCallbackMethod_update_pid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update_pid(::grpc::ServerContext* /*context*/, const ::vanet_block::block_data* /*request*/, ::vanet_block::response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* update_pid(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_qurery_Block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_qurery_Block() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->qurery_Block(context, request, response); }));
    }
    ~WithRawCallbackMethod_qurery_Block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status qurery_Block(::grpc::ServerContext* /*context*/, const ::vanet_block::psuedoid* /*request*/, ::vanet_block::block_data* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* qurery_Block(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_reg_vehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_reg_vehicle() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vanet_block::block_data, ::vanet_block::response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::vanet_block::block_data, ::vanet_block::response>* streamer) {
                       return this->Streamedreg_vehicle(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_reg_vehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status reg_vehicle(::grpc::ServerContext* /*context*/, const ::vanet_block::block_data* /*request*/, ::vanet_block::response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedreg_vehicle(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vanet_block::block_data,::vanet_block::response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_update_pid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_update_pid() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vanet_block::block_data, ::vanet_block::response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::vanet_block::block_data, ::vanet_block::response>* streamer) {
                       return this->Streamedupdate_pid(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_update_pid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status update_pid(::grpc::ServerContext* /*context*/, const ::vanet_block::block_data* /*request*/, ::vanet_block::response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedupdate_pid(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vanet_block::block_data,::vanet_block::response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_qurery_Block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_qurery_Block() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vanet_block::psuedoid, ::vanet_block::block_data>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::vanet_block::psuedoid, ::vanet_block::block_data>* streamer) {
                       return this->Streamedqurery_Block(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_qurery_Block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status qurery_Block(::grpc::ServerContext* /*context*/, const ::vanet_block::psuedoid* /*request*/, ::vanet_block::block_data* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedqurery_Block(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vanet_block::psuedoid,::vanet_block::block_data>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_reg_vehicle<WithStreamedUnaryMethod_update_pid<WithStreamedUnaryMethod_qurery_Block<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_reg_vehicle<WithStreamedUnaryMethod_update_pid<WithStreamedUnaryMethod_qurery_Block<Service > > > StreamedService;
};

}  // namespace vanet_block


#endif  // GRPC_vanet_5fblock_2eproto__INCLUDED
