// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: vanet_block.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlockchainVanetClient is the client API for BlockchainVanet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockchainVanetClient interface {
	RegVehicle(ctx context.Context, in *BlockData, opts ...grpc.CallOption) (*Response, error)
	UpdatePid(ctx context.Context, in *BlockData, opts ...grpc.CallOption) (*Response, error)
	Qurery_Block(ctx context.Context, in *Psuedoid, opts ...grpc.CallOption) (*BlockData, error)
}

type blockchainVanetClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockchainVanetClient(cc grpc.ClientConnInterface) BlockchainVanetClient {
	return &blockchainVanetClient{cc}
}

func (c *blockchainVanetClient) RegVehicle(ctx context.Context, in *BlockData, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/vanet_block.BlockchainVanet/reg_vehicle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainVanetClient) UpdatePid(ctx context.Context, in *BlockData, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/vanet_block.BlockchainVanet/update_pid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainVanetClient) Qurery_Block(ctx context.Context, in *Psuedoid, opts ...grpc.CallOption) (*BlockData, error) {
	out := new(BlockData)
	err := c.cc.Invoke(ctx, "/vanet_block.BlockchainVanet/qurery_Block", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockchainVanetServer is the server API for BlockchainVanet service.
// All implementations must embed UnimplementedBlockchainVanetServer
// for forward compatibility
type BlockchainVanetServer interface {
	RegVehicle(context.Context, *BlockData) (*Response, error)
	UpdatePid(context.Context, *BlockData) (*Response, error)
	Qurery_Block(context.Context, *Psuedoid) (*BlockData, error)
	mustEmbedUnimplementedBlockchainVanetServer()
}

// UnimplementedBlockchainVanetServer must be embedded to have forward compatible implementations.
type UnimplementedBlockchainVanetServer struct {
}

func (UnimplementedBlockchainVanetServer) RegVehicle(context.Context, *BlockData) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegVehicle not implemented")
}
func (UnimplementedBlockchainVanetServer) UpdatePid(context.Context, *BlockData) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePid not implemented")
}
func (UnimplementedBlockchainVanetServer) Qurery_Block(context.Context, *Psuedoid) (*BlockData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Qurery_Block not implemented")
}
func (UnimplementedBlockchainVanetServer) mustEmbedUnimplementedBlockchainVanetServer() {}

// UnsafeBlockchainVanetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockchainVanetServer will
// result in compilation errors.
type UnsafeBlockchainVanetServer interface {
	mustEmbedUnimplementedBlockchainVanetServer()
}

func RegisterBlockchainVanetServer(s grpc.ServiceRegistrar, srv BlockchainVanetServer) {
	s.RegisterService(&BlockchainVanet_ServiceDesc, srv)
}

func _BlockchainVanet_RegVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainVanetServer).RegVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vanet_block.BlockchainVanet/reg_vehicle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainVanetServer).RegVehicle(ctx, req.(*BlockData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainVanet_UpdatePid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainVanetServer).UpdatePid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vanet_block.BlockchainVanet/update_pid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainVanetServer).UpdatePid(ctx, req.(*BlockData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainVanet_Qurery_Block_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Psuedoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainVanetServer).Qurery_Block(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vanet_block.BlockchainVanet/qurery_Block",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainVanetServer).Qurery_Block(ctx, req.(*Psuedoid))
	}
	return interceptor(ctx, in, info, handler)
}

// BlockchainVanet_ServiceDesc is the grpc.ServiceDesc for BlockchainVanet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlockchainVanet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vanet_block.BlockchainVanet",
	HandlerType: (*BlockchainVanetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "reg_vehicle",
			Handler:    _BlockchainVanet_RegVehicle_Handler,
		},
		{
			MethodName: "update_pid",
			Handler:    _BlockchainVanet_UpdatePid_Handler,
		},
		{
			MethodName: "qurery_Block",
			Handler:    _BlockchainVanet_Qurery_Block_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vanet_block.proto",
}
